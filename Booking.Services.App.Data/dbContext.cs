// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Booking.Services.App.Models.Models;
using Microsoft.EntityFrameworkCore;

namespace Booking.Services.App.Data.Repositories
{
    public partial class dbContext : DbContext
    {
        public dbContext(DbContextOptions<dbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Experience> Experiences { get; set; }

        public virtual DbSet<Faq> Faqs { get; set; }

        public virtual DbSet<Gallery> Galleries { get; set; }

        public virtual DbSet<Payment> Payments { get; set; }

        public virtual DbSet<Reservation> Reservations { get; set; }

        public virtual DbSet<ReservationService> ReservationServices { get; set; }

        public virtual DbSet<Service> Services { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasCharSet("utf8mb4");

            modelBuilder.Entity<Experience>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PRIMARY");

                entity.ToTable("experience");

                entity.Property(e => e.Id)
                    .HasMaxLength(45)
                    .HasColumnName("id");
                entity.Property(e => e.Approved)
                    .HasDefaultValueSql("'0'")
                    .HasColumnName("approved");
                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("comment");
                entity.Property(e => e.CreatedAt)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasColumnType("timestamp")
                    .HasColumnName("created_at");
                entity.Property(e => e.Rating).HasColumnName("rating");
                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnName("user_id");
            });

            modelBuilder.Entity<Faq>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PRIMARY");

                entity.ToTable("faq");

                entity.Property(e => e.Id)
                    .HasMaxLength(45)
                    .HasColumnName("id");
                entity.Property(e => e.Answer)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("answer");
                entity.Property(e => e.Approved)
                    .HasDefaultValueSql("'0'")
                    .HasColumnName("approved");
                entity.Property(e => e.Question)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("question");
            });

            modelBuilder.Entity<Gallery>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PRIMARY");

                entity.ToTable("gallery");

                entity.Property(e => e.Id)
                    .HasMaxLength(45)
                    .HasColumnName("id");
                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("description");
                entity.Property(e => e.ImageUrl)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("image_url");
                entity.Property(e => e.UploadedAt)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasColumnType("timestamp")
                    .HasColumnName("uploaded_at");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PRIMARY");

                entity.ToTable("payment");

                entity.HasIndex(e => e.ReservationId, "reservation_id");

                entity.HasIndex(e => e.StripePaymentId, "stripe_payment_id").IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(45)
                    .HasColumnName("id");
                entity.Property(e => e.Amount)
                    .HasPrecision(10, 2)
                    .HasColumnName("amount");
                entity.Property(e => e.CreatedAt)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasColumnType("timestamp")
                    .HasColumnName("created_at");
                entity.Property(e => e.PaymentStatus)
                    .HasDefaultValueSql("'pending'")
                    .HasColumnType("enum('pending','completed','failed')")
                    .HasColumnName("payment_status");
                entity.Property(e => e.ReservationId)
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnName("reservation_id");
                entity.Property(e => e.StripePaymentId)
                    .IsRequired()
                    .HasColumnName("stripe_payment_id");

                entity.HasOne(d => d.Reservation).WithMany(p => p.Payments)
                    .HasForeignKey(d => d.ReservationId)
                    .HasConstraintName("payment_ibfk_1");
            });

            modelBuilder.Entity<Reservation>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PRIMARY");

                entity.ToTable("reservation");

                entity.Property(e => e.Id)
                    .HasMaxLength(45)
                    .HasColumnName("id");
                entity.Property(e => e.CreatedAt)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasColumnType("timestamp")
                    .HasColumnName("created_at");
                entity.Property(e => e.EndDate).HasColumnName("end_date");
                entity.Property(e => e.StartDate).HasColumnName("start_date");
                entity.Property(e => e.Status)
                    .HasDefaultValueSql("'pending'")
                    .HasColumnType("enum('pending','confirmed','cancelled')")
                    .HasColumnName("status");
                entity.Property(e => e.TotalPrice)
                    .HasPrecision(10, 2)
                    .HasColumnName("total_price");
                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(450)
                    .HasColumnName("user_id");
            });

            modelBuilder.Entity<ReservationService>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PRIMARY");

                entity.ToTable("reservation_service");

                entity.HasIndex(e => e.ReservationId, "reservation_id");

                entity.HasIndex(e => e.ServiceId, "service_id");

                entity.Property(e => e.Id)
                    .HasMaxLength(45)
                    .HasColumnName("id");
                entity.Property(e => e.Quantity)
                    .HasDefaultValueSql("'1'")
                    .HasColumnName("quantity");
                entity.Property(e => e.ReservationId)
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnName("reservation_id");
                entity.Property(e => e.ServiceId)
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnName("service_id");
                entity.Property(e => e.SubTotal)
                    .HasPrecision(10, 2)
                    .HasColumnName("sub_total");

                entity.HasOne(d => d.Reservation).WithMany(p => p.ReservationServices)
                    .HasForeignKey(d => d.ReservationId)
                    .HasConstraintName("reservation_service_ibfk_1");

                entity.HasOne(d => d.Service).WithMany(p => p.ReservationServices)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("reservation_service_ibfk_2");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PRIMARY");

                entity.ToTable("service");

                entity.Property(e => e.Id)
                    .HasMaxLength(45)
                    .HasColumnName("id");
                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(45)
                    .HasColumnName("created_by");
                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("creation_date");
                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("description");
                entity.Property(e => e.IsActive).HasColumnName("is_active");
                entity.Property(e => e.IsIncluded).HasColumnName("is_included");
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("name");
                entity.Property(e => e.Price)
                    .HasPrecision(10, 2)
                    .HasDefaultValueSql("'0.00'")
                    .HasColumnName("price");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
